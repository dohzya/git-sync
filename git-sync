#!/usr/bin/env ruby

def add_all_remotes!(opts)
  if (remotes = %x(git config sync.remotes).chomp.split(' ')).empty?
    remotes = %x(git remote).chomp.split("\n")
  end
  opts[:remotes] += remotes
end

opts = {
  :verbose => $VERBOSE,
  :exclude => %x(git config sync.exclude).chomp,
  :remotes => [],
}
while arg = ARGV.shift
  case arg
  when /^(?:-a|--all)$/
    add_all_remotes!(opts)
  when /^(-e|--exclude)$/
    opts[:exclude] = (arg =~ /=/ ? arg.sub(/.*=\s*/, '') : args.shift)
  when /^(?:-f|--(no-)?force)$/
    opts[:force] = !$1
  when /^(?:-p|--(no-)?prune)$/
    opts[:prune] = !$1
  when /^(?:-s|--sync)$/
    opts[:force] = opts[:prune] = true
  when /^(?:-n|--(no-)?dry-run)$/
    opts[:dry_run] = !$1
  when /^(?:-v|--(no-)?verbose)$/
    opts[:verbose] = !$1
  when /^(?:-h|--help$)/
    warn <<USAGE
usage: git sync [options] [<remote>...]

options:
  -a | --all           sync all remotes
  -e | --exclude       excluded branches (allow globbing)
  -f | --[no-]force    force update (allow no-ff push)
  -p | --[no-]prune    remove orphan refs (removed in local but still in remote)
  -s | --sync          shortcut for -f -p
  -n | --[no-]dry-run  do not actually sync but show the command instead
  -v | --[no-]verbose  display some extra informations
  -h | --help          show this help
USAGE
    exit
  else
    opts[:remotes] << arg
  end
end
add_all_remotes!(opts) if opts[:remotes].empty?
opts.delete(:exclude) if opts[:exclude].empty?
opts[:exclude] &&= /#{opts[:exclude].gsub(/[*]/, '.*').gsub(/[?]/, '.')}/

res = opts[:remotes].each do |remote_name|
  next if remote_name.empty?
  puts "#{remote_name}:" if opts[:verbose]
  refs = {}
  %x(git show-ref --heads --tags).each_line do |line|
    hash, ref = line.split(/\s+/)
    refs[ref] = hash
  end
  %x(git ls-remote --heads --tags #{remote_name}).each do |line|
    next if line =~ /\^|\sHEAD$/
    hash, ref = line.split(/\s+/)
    refs[ref] = [refs[ref], hash]
  end
  actions = refs.map do |ref, hashes|
    if opts[:exclude] && ref =~ opts[:exclude]
      puts "  ignore ref: #{ref}" if opts[:verbose]
      next
    elsif hashes.is_a? String
      puts "  new ref: #{ref} (#{hashes})" if opts[:verbose]
      "#{ref}:#{ref}"
    else
      local, remote = hashes
      case
      when local.nil?
        if opts[:prune]
          puts "  prune ref: #{ref} (#{remote})" if opts[:verbose]
          ":#{ref}"
        else
          puts "  orphan ref: #{ref} (#{local})" if opts[:verbose]
        end
      when local == remote
        puts "  same ref: #{ref} (#{local})" if opts[:verbose]
      else
        puts "  update ref: #{ref} (#{remote} => #{local})" if opts[:verbose]
        "#{opts[:force] ? '+' : ''}#{ref}:#{ref}"
      end
    end
  end.compact
  unless actions.empty?
    cmd = "git push #{remote_name} #{actions.join(' ')}"
    if opts[:dry_run]
      puts cmd
    else
      puts cmd if opts[:verbose]
      %x(#{cmd})
    end
  end
end
